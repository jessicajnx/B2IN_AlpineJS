HTML (/20 points)
😘 Utiliser un validator d'HTML (/5 points)
❌ Utiliser des attributs d'accessibilité (si possible) (/5 points) 
❌ Utiliser une méthodologie CSS de notation des classes (ex : BEM) (/5 points)
✅ Utiliser des identifiants de façon appropriée (/5 points)
Sécurité (/5 points)
❌ Faire attention au Broken Access Control (redirection obligatoire) (/5 points)
JavaScript (/20 points)
✅ Utiliser le this (/1 point)
✅ Utiliser des fonctions fléchées (/1 point)
✅ Utiliser des expressions de fonction fléchée (/1 point)
✅ Utiliser des tableaux et des méthodes de tableau (map, forEach, etc.) (/5 points)
✅ Utiliser des variables mutables et constantes de façon appropriée (/2 points)
✅ Utiliser des types primitifs et des types composites (/2 points)
✅ Utiliser des structures de contrôles : ternaires, switch, boucle (/2 points)
😘 Architecturer le code de façon "clean" : réutilisabilité, responsabilité unique (/5 points)
✅ Architecturer une application robuste : gestion des erreurs (throw) (/3 points)
Alpine.js (/20 points)
✅ Utiliser x-data (/1 point)
✅ Utiliser un plugin d'Alpine (/5 points)
✅ Utiliser x-cloak, x-show, x-if, x-teleport, x-init, x-bind (/5 points) --> SAUF X_INIT
✅ Utiliser Alpine.store(), Alpine.data() (/5 points)
❌ Créer une directive personnalisée (/2 points)
✅ Utiliser x-transition, x-ignore (/2 points)
Bonnes pratiques (/20 points)
❌ Utiliser ESLint (/5 points)
❌ Utiliser un Formatter (/5 points)
😘 Enlever le code mort (/3 points)
✅ Commenter le moins possible le code (/2 points)
✅ Faire attention au nommage des variables, constantes, fonctions, méthodes (/5 points)
Total des points obtenus (approximation)
HTML : 5/20
Sécurité : 0/5
JavaScript : 12/20
Alpine.js : 6/20
Bonnes pratiques : 2/20
